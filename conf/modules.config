/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    errorStrategy = 'ignore'

    publishDir = [
        path: { "${params.outdir}/${meta.id ?: meta.ref ?: ''}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> get_publish_file(filename) }
    ]

    withName: BWA_INDEX {
        storeDir = { "store/references/${meta.ref}" }
    }

    withName: SAMTOOLS_FAIDX {
        storeDir = { "store/references/${meta.ref}" }
    }

    withName: MAKE_SNP_CONS_FA {
        storeDir = { "store/references/${meta.ref}" }
    }

    withName: TOUCH {
        storeDir = { "store/references/${meta.ref}" }
    }

    withName: CHECK_SAMPLES {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: REMOVE_POLY_GS {
        storeDir = { "store/remove_poly_gs/${meta.id}" }
    }

    withName: TRIMMOMATIC_MODULE {
        storeDir = { "store/trimmomatic/${meta.id}" }
        ext.args2 = 'ILLUMINACLIP:NexteraPE-PE.fa:2:30:10 LEADING:3 TRAILING:3 SLIDINGWINDOW:4:20 MINLEN:100'
    }

    withName: FASTQC_MODULE {
        ext.args = '--quiet'
    }

    withName: SPADES_MODULE {
        storeDir = { "store/spades/${meta.id}" }
        ext.args = '--careful --cov-cutoff auto'
    }

    withName: FILTER_CONTIGS {
        publishDir = [
            path: { "${params.outdir}/${meta.id ?: meta.ref ?: ''}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('.fa') ? filename : get_publish_file(filename) }
        ]
    }

    withName: MASH_SKETCH_SPECIES {
        ext.args   = '-k 16 -s 400'
        ext.suffix = 'ref_RvSp'
    }

    withName: MASH_SKETCH_FQ {
        ext.args   = '-m 2 -k 16 -s 400'
        ext.suffix = 'comb_reads'
    }

    withName: MASH_DIST_FQ {
        ext.suffix = 'distances_RvSp'
    }

    withName: PARSE_MASH_OUTPUT_FQ {
        ext.suffix = 'mash_RvSp'
    }

    withName: MASH_SKETCH_QUERY_FA {
        ext.suffix = 'query_FAvNCBI'
    }

    withName: MASH_SKETCH_REF_FA {
        ext.suffix = 'ref_FAvNCBI'
    }

    withName: MASH_DIST_FA {
        ext.suffix = 'distances_FAvNCBI'
    }

    withName: PARSE_MASH_OUTPUT_FA {
        ext.suffix = 'mash_FAvNCBI'
    }

    withName: BWA_MEM {
        ext.args = '-K 100000000'
    }

    withName: PICARD_MARKDUPLICATES {
        storeDir = { "store/markduplicates/${meta.id}" }
    }

    withName: BCFTOOLS_MPILEUP {
        storeDir = { "store/mpileup/${meta.id}" }
    }

    withName: SAMTOOLS_DEPTH {
        ext.args = '-aa'
    }

    withName: QUAST_MODULE {
        ext.args = '--fast'
    }

    withName: FREEBAYES_MODULE {
        storeDir = { "store/freebayes/${meta.id}" }
        ext.args = '-p 1'
    }

    withName: MAKE_MST_ME {
        ext.suffix = 'ME'
    }

    withName: MAKE_MST_SNP {
        ext.suffix = 'SNP'
    }

    withName: PARSNP_MODULE {
        ext.args = '-v'
    }

    withName: NW_DISPLAY {
        ext.args = '-s -w 700 -b opacity:0'
    }

    withName: KRAKEN {
        ext.args = '--preload'
    }

    withName: PARSE_KRAKEN_OUTPUT {
        publishDir = [
            path: { "${params.outdir}/${meta.id ?: meta.ref ?: ''}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.endsWith('cc.fasta') ? filename : get_publish_file(filename) }
        ]
    }

    withName: MAKE_SOFTWARE_VERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}

def get_publish_file(String filename) {
    def publish_files = [
        'Ampel_dist.png', 'ME_matrix.csv', 'MST_ME.png', 'MST_SNP.png', 'SNP_matrix.csv',
        'SPAdes_contigs.fa', 'contig_cov_dist.png', 'contig_len_dist.png', 'distances_FAvNCBI.tab',
        'distances_RvSp.tab', 'freebayes.vcf', 'histo_depths.png', 'kraken_res.txt', 'log.txt',
        'logging.txt', 'mutation_dist.png', 'mutations_matrix.csv', 'parsnp_tree.svg',
        'per_base_quality_1.png', 'per_base_quality_2.png', 'per_sequence_quality_1.png',
        'per_sequence_quality_2.png', 'plot_contig_cov.png', 'plot_contig_len.png',
        'plot_depths.png', 'report.txt', 'report.html', 'wrong_genus_contigs.fasta'
    ]
    for (publish_file in publish_files) {
        if (filename.endsWith('.' + publish_file)) {
            return publish_file
        }
    }
    return null
}
